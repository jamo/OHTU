1:  Ei

SCRUM:
		3 ROOLIA
				-Kehittäjä
						-Muodostaa scrum tiimin
								-Tiimiä ei johdeta ulkopuolelta, itse organisoituva
						-Kaikilla osaaminen, kompetenssi, järjestelmän toteuttamiseen ja suunnitteluun
						-Työskentelevät samassa paikassa
				-Scrum master
						-ohjaa prosessia, rajapinta yrityksen hallintoon
						-Järjestää scrumiin liittyvät palaverit
						-"Huolehtii työrauhasta"
						-fasilitioi eli varmistaa, että noudatetaan scrum-prosessia
						-ei ole projektipäällikkö eli ei suunnittele tai ohjaa muiden töitä
				-Product owner
						-Tuotteen omistaja, hallinoi product backlogia
						-Ainut backlogin priorisoija
						-Vastuussa backlogista eli varmistaa, että lopputuloksessa on tarvittavat ominaisuudet
			
			-Scum tiimi, 3-10 kehittäjää
		(Scrum of scrum: voi olla useita itsenäisiä scrum-tiimejä esim. eri saiteilla, jotka tekevät paikallisen 
		scrum masterin fasilitoimana tiettyjä kokonaisuuksina, jotka lopulta muodostavat tuotteen)
			-Product Backlog toteutettavan ohjelmiston ominaisuudet/vaatimukset priorisoidussa järjestyksessä
					-Prioriteetiltaan korkeimpana ovat ne, joilla on tilaajalle suurin bisnesarvo eli käytännössä
					 toteutetaan aina ensin tärkeimmät ominaisuudet, joille jää myös eniten testaus- ja käyttöopetteluaikaa
					-Proriteetiltaan korkeimmalla olevien tehtävien työmäärä arvioitu (kehittäjätiimi)
					-Asiat voidaan esittää esim. UserStoryinä
					-Alussa kerätään vain suppeita kuvauksia
						-Priorisoidaan ja työmäärää arvioidaan
					
			-Sprint backlog 

ANNEN OPPI: Varsinaisen scrum-prosessin ulkopuolella, siis sprinttien ulkopuolella, tehdään koko ajan jatkuvasti
määrittelytyötä Product Backlogin vaatimusten tarkentamiseksi (git jne). Sitä tekee Product Owner ja tilaajan muut mahdolliset edustajat/sidosryhmät, mutta koska heidän
osaamisensa ei ole määrittelytyössä, täytyy devaajilta varata about joka päivälle jonkun verran aikaikkunaa, jolloin he
ovat mukana määrittelytyössä. Määrittelytyöhön voi osallistua myös sellaisia it-ihmisiä, jotka eivät kuulu scrum tiimiin, esim
käyttöliittymäsuunnittelija, joka tekee tilaajan vaatimuksiin liittyviä käyttöliittymäprotoja helpottamaan käyttäjien
ymmärrystä siitä, mitä ovat saamassa/tilaamassa ja toisaalta helpottamassa devaajia arvioimaan työmääriä.
(Lähde. Reaktor Innovations, Jukka Lindström, scrum master -koulutusaineisto, syksy 2011)


	SPRINTTI
			-Alussa 2 osainen sprintin suunnittelu palaveri
					-Eka Osa (nimi?)
							-Product owner esittelee product backlogin korkeimmalla prioriteetilla olevat vaatimukset eli sprinttin ehdotettavat
							-Tiimi sisäistää mitä tarkoittaa
							-Valitsee ne, minkä toteuttamiseen voivat sitoutua ja jotka mahtuvat työmääriltään aikaikkunaan
							-Asetetaan Sprint goal - geneerisempi ilmaus siitä, mitä tehdään
					-Toka Osa
							-Miten sprintin tavoitteet saavutetaan
							-lista tehtävistä (task)
							-Luodaan sprintin backlog							
					-Max 4h kumpikin palaveri
	  	-Tiimi toteuttaa valitut asiat itseorganisoidusti
			-Daily scrum palaverit
					-Päivä alkaa tällä
					-Max 15min
					-Kaikki paikalla (scrum-tiimi, product owner ja scrum master)(saa olla myös muita, mutta ei puheoikeutta)
					-Jokaiselle
							-Mitä sain eilen aikaan
							-Mitä tänään aikaan
							-Mitä esteitä
					-Jokaiselle selviää projetin tilanne ja päivitetään burndown chart, jota pidetään seinällä työtilassa
			-1-4 vkon iteraatiot
			-Kiinteän pituinen
			-Valitaan vain sen verran mikä varmasti saadaan tehtyä
			-Aina lopussa toimiva versio
			-Vaatimukset eivät muutu sprintin aikana eli sprintti on kiinnitetty (product backlogia sen sijaa saa uudelleenorganisoida)
			Definition of DONE
				-jo vaatimusta määriteltäessä kerrotaan, miten vaatimus testataan ja miten voidaan todentaa sen DoD
				-analysoitu, dokumentu, suunniteltu, testattu, testaus automatisoitu, integroitu muuhun ohjelmistoon.
				-Jos ei valmis niin seur sprintissä uudestaan eli korjauksille pitä varata seur sprintistä aikaa
					(product owner vastaa niiden hylkäämisestä)
			-Laadusta ei tingitä vaikka jotain jäisi tekemättä - ei aloiteta seuraavaa ominaisuutta ennenkuin ed on valmis
			-Lopuksi katselmointi
					-katsotaan/demotaan lopputulosta ei powrpoint kalvoja
					-Product owner katsoo, mitä saatiin tehtyä
					-hyväksytään sprint backlogin mukaisesti tehdyt vaatimukset valmiiksi tai esitetään korjaustarpeita joillekin
					-Kaikki saa antaa palautetta tuotteesta
						-Ehdottaa uusia vaatimuksia.
						->product backlogin uudelleen prioisointi
					-max 4h
			-Retrospektiivi
					-Spintin lopussa ennen seuraavaa sprinttiä pidettävä palaveri, jossa katsotaan omaa työprosessoa
						-mikä hyvin, missä parannettavaa
					-Inspect and Adapt
							-Lyhyt syksli mahdollistaa muutokset
							-Kannustaa parantamaan työprosessiaan
			-Jokaisen sprintin yhteydessä uusi sprintin suunnittelu
			
Design Patterns
			-Useita luokkia
					-Olioiden luomista helpottavat
					-Ohjelman rakennetta ohjaavat
					-Ohjelman suoritusta ja laskentaa ohjaavat
			-muita patterneja
					-Arkkitehtuurimallit
					-Project management patterns
			-Dependency injection
					-Riippuvuuksien injekointi
					-YKsikkötestauksen helpottaminen
					
Vaatimusten määrittely
			-Toiminnalliset vaatimukset
					-Ohjelman toiminnot
					-Dokumentointi
							-featurelistoin
							-UML use caseina
							-**UserStoryinä**
									-loppukäyttäjän kannalta arvoa tuottava ominaisuus
									-Voi olla vain "placeholder" myöhemmin tarkentuvalle vaaatimukselle. Esim. asiakas lisää ostoskoriin oluen
									-Ei kerro, miten asia pitää toteuttaa
									-Toteutettaessa pakko tarkentaa
									-Toteutus tarkastetaan testaamalla (autom tai käsin), hyväksymistesti
									-Asiakkaan kielellä, ei teknstä kamaa
									-Kuvauksesta käy ilmi kenelle tuottaa arvoa
									-ennen toteutusta tarkennettava
					-INVEST
						-Independent
								-Toisistaan riippumattomia
						-Negotiable
								-lupaus että tehdän, ei aluksi kattava. tarkennetaan ennen koodausta
						-Valuable to user/coustomer
								-
						-Estimable
								-Työmäärä arvioitavissa
								-Auttaa asiakasta priorisoimisessa
								-Projektin ajan arviointi
						-Small
								-Max viikon työpanos
						-Testable
								-Pitää voida testata niin että voidaan yksiselitteisesti nähdä onko ominaisuus tehty
			-ei toiminnalliset vaatimukset
					-"laatuvaatimukset"
							-Käytettävyys, testattavuus, laajennettavuus, suorituskyky, skaalautuvuus, tietoturva, time-to-market
Anne: ei-toiminnalliset vaatimukset: tietosisältö-, tekniset-, tietoturva-, laadulliset-, käytettävyysvaatimukset
					-ympäristön rajotteet
							-Toteutusteknologia
							-intogrointi muihin järjestelmiin
							-Standardit
			-Ennen toteutusta
			-Lineaarisissa malleissa aina kokonaan ennen
			-Iterativisissa matkan varrella
			-Asiakas/sen edustaja aktiivisesti mukana prosessissa
			-Vaiheet
					-Kartoitus
							-Selvitetään sidosryhmät (stakeholders)
							-brainstorm asiakkaan ja kehittäjien kanssa
							-kuvitellaan käyttäjiä ja niille skenaarioita
							-protptyyppejä ja käyttöliittymäluonnoksia
									-Auttavat asiakasta tarkenatamaan vaatimuksiaan
							-Jos korvaa vanhan järjestelmän, voidaan havainnoida käyttäjien toimintaa (etnografia)
					-analyysi
							-onko ristiriitoja
							-riittävän kattavat vaatimukset
							-vaatimukset testattavissa
					-validointi
							-Vastaavatko vaatimukset asiakkaan toiveita
					-dokumentointi
							-Ohjelmistokehittäjät : mitä tehdään
							-Testaajat: toimiiko järjestelmä vaatimusten mukaan
							-mukana sopparissa
					-hallinnointi
			-Edityy usein spiraalimaisesti
					-ensin kartoiteaan, analydoidaan osa
					-repeat
			
			-1900 
					-Kaikki kerrallaan (vaiheet täydellisinä peräkkäin)
					-Raskas prosessi
					-Muutoksia vaikea tehdä (kalliita ja muutos pitää tehdä moneen paikkaan, jos se löytyy myöhään)
					-Ei toimi
			-2000 
					-tehdään useassa osassa
							-time to market; halutaan heti tuotantoon
							-Uusiokäyttä räätälöidään valmiita komponenttejä
					-voi vaikeuttaa kustannusten arviointia
							-Väärin muotoiltu vaatimus voi rikkoa jotain
			-Nykyisin kaikki vaiheet sotketaan yhteen - tehdään pienemmissä erissä, nopeammassa syklissä.
			-Mahdollista saada aiemmin tuotantoon
			-Asiakas ei ehkä oikeasti haluakaan kaikkia vaatimuksia toteutettavaksi
		Estimointi
			-StoryPoint
				-arvioidaan UserStoryjen pituutta. 
				-Usein 1 StopyPoint kiinnitetään jonkin asian toteuttamiseen. ei virallinen aika
			-Aina ohjelmistokehitystiimi estimoi
			-Asiakas tarkentamassa vaatimuksaan userstoryihin
			-estimointi epätarkkaa, joten siihen max 15min 
			-Aika arviot skaalalla tyyliin 1,3,4,5,10,50,100,200, epic
			-parempi 1,2,4,8,epic
			
	Verifiointi
			-We are building the product right
			-Vastaa vaatimusmäärittelyä
		-Katselmoinnit
				-Käydään tehtyjä dokkareita ja koodia läpi
				-Staattinen tekniikka
				-Jonkun muun kuin ohjelmoijan toimesta
				-Tyyli, ylläoidettävyys selviävät
				-Pariohjelmoinnissa toinen aina katselmoi kun toinen koodaa
		-Tarkastus, katsalmusta muodollisempi
				-formaali kokous
		-Testaus
					-Dynaaminen tekniikka
					-Virheettömäksi testaus lähes mahdotonta
					-2 eri tavoitetta
							-Osoittaa että täyttää asetetut vaatimukset (acceptance test)
							-Löytää ohjelmasta virheitä
					-Molemmat ulkosen laadun paramtamiseen
	Validointi
			-We are building the right product 
			-Täytää käyttäjän odotukset
		-Molempien tavoitteena varmistaa että ohjelma on riittävän hyvä ja toimii siihen mihin tarkoitettu
			-Vesiputouksessa juuri katselmointi
			-Vesiputouksessa	katselmoinnilla			
			-Agilessa tapahtuu Sprint review yhteydessä, eli sprinttien lopussa

	Koodin yhteisomistus
			-Kukaan ei omista tiettyä kohtaa koodsta
			-Kaikki saa muokata koodia missä tahansa
			-Koodia tuntematon voi saada tuhoa aikaan
	Coding Standards
			-Tiimillä tyyli johon kaikki sitoutuvat
	
	TESTAUS
			-Testauksen tasot
				-Business Requirements  --  		User acceptance testing
				-Systen Requiremenrs 	  --  	System testing
				-Design specification 	-- 	Integration testing
				-Program Specification  -- Unit testing
				-Code										-- Source code review
			-Yksikkötestaus(Unit testing)
					-Yksittäisten metodien, luokkien testaus
					-Ohjelmoijat suorittavat
					-Koodin rakenne huomioidaan testattaessa (white box -testing)
					-Sisäisen laadun kontrollointi
					-Vain kehityksen iloksi
						-Toki hyötyjä myös käyttäjille
					-Bugit taloudellista huomata ajoissa
			-IntegraatioTestaus(integration testing)
					-Komponenttien yhdistäminen
					-Sovelluskehittäjä suorittaa
						-Bottom up
								-Yksilöllisistä komponenteista ja vähitellen liitetään niitä yhteen
						-Top-down
								-Ensin korkean tason rakenteet ja käytetään stubeja
								-Stubit korvataan yksitellen
						-Big bang
								-Tapa yhdistää koodi kerralla.
								-Riskialtis
			-Järjestelmätestaus(system testing)
					-Varmistetaan että järjestelmä toimii halutulla tavalla
					-Käyttäjäorganisaatio suorittaa
					-Testataan saman rajapinnan kautta, mistä ohjelmaa käytetään (black box -testaus)
					-ALALAJEJA
							-Käytettävyystestaus
							-Stressitestaus
							-Tietoturvan testaus
			-Käyttäjän hyväksymistestaus (user acceptance testing)
					-???Loppukäyttäjän suorittama testaus???
					-Hyväksymis testit tehdään käyttäjän kielellä
					-Esim. userstoryjä
					-Storyn hyväksymistestit heti sprintin lopussa
			-Regressiotestaus
					-Iteratiivisessa kehityksessä jokainen iteraatio tuottaa lisää oimivia osia koodiin, tulee huolehtia että muutokset eivät riko mitään vanhaa
					-Testit ajateen aina uudelleen kun tulee muutoksia
					-Joukko yksikkö-, integraatio- ja järjestelmätestejä
	 -Testisyötteet
					-Jaetaan ekvivalenssiluokkiin, yksi testi kutakin kohti
	 -Testauskattavuus
					-Rivikattavuus
						-Monellako % riveista käydään
					-Haarautumakattavuua
						-Montako % ehtolauseiden haaroista katsottu
	-Ketterien menetelmien testauskäytänteiyä
				-TDD
						-Paljon kattavia testejä
						-Suunnitelu ja toteutustasin tekniikka
						-XPn käytänteitä
						-Vaiheet
								-Ensin testiö sen verran että se feilaa
								-Sitten koodia niin että testi menee löpi
								-Refaktorointi
								-ja takas alkuun
						-Ei ole tapana juuri suunnitella metodeja etukäteen
						-Sisäinen rakenne muodostuu refaktorointien kautta
						-Ei tule extra ominaisuuksia (YAGNI you ain't gonna need it)
						-Koodin ylläpidettävyys pääosin hyvö
						-Virheet huomataan heti
						-Testikoodia tulee paljon
						-Tuotantokoodia voi tulla vähemmän
						-Legacy koodin laajentaminen vaikeaa
								
				-ATDD / BDD
						-Käyttäjätason TDD
						-User storyjen testaus
						-ATDD osin sama kuin BDD
						-ATDD
								-Asiakkaan tasolla mielekäs toimivuus
				-CI continuous testing - Jatkuva integraatio
						-Perinteisen integaatiotestauksen korvaava työskentelytapa
						-Yksikkö-, integraatio- ja järjestelmätason testejä
						-CI palvelin tarkkeilee repoa, jos muutoksia hakee ne ja ajaa testit
						-Jos koodi ei käänny, tai testit eivät mene läpi, seuraa poikkeustilanne
								-Do not break the build
								-Korjattava välittömästi
						-Smoke test
								-Testaa sovelluksen pääpiirteittäin, paljastaa suurimmat ongelmat
						-Daily build
								-Päivittäi tehtävä toimiva versio sovelluksesta
						Kehittäjän vaiheet
								-Uusin koodi reposta
								-Toteutetaan työn alla oleva toiminnallisuus ja sille testit
								-Integroidaan koodi muun yhteyteen
								-Haetaan uusin koodi ja ajetaan testit
								-Kun kaikki käyttäjän koneella läpi, niin pushaa repoon
								-CI palvelin huomaa muutokset ja ajaa testi 
								-Jos testit liian hitaita
										-Jaetaan en kahteen osaan
												-Commit build
													-Oikeus pushata palvelimelle
												-Secondary build
													-Suoritetaan palvelimella
													-Sisältää hitaammat testi
							  -Joskus viedään astetta pitemmälle. lisätään automaattinen deployaus
									-Hyödyllinen käytäntö
											-Voidaan demota asiakkaalle milloin tahansa
											-Voidaan ajaa pitkäkestoisia kuormitustestejä
											-Tutkivaa testaamista
									-Nykyisin esim. web sovellukset tykätään julkaista monta kertaa päivässä tuotantoon/testaukseen
										-Continuous deployment
				-Exploratory testing - tutkiva testaus
						-Ei formaalia testaus tapaa
						-Luo uusia testejö vanhan palautteen perusteella
						-Kiinnitetään huomio varsinaisen testattavan ulkopuolisiin asioihin
						-Ei sovellu regressiotestaamiseen
						-ad hoc testaukseksi aikanaan kutsuttu
						
Ohjelmiston suunnittelu
		-Ohjelmistojen tekeminen sisältää aina
				-Vaatimusten analysoinnin ja määrittelyn
				-Suunnittelun
				-Toteuttamisen
				-Testauksen
				-ylläpidon
		-Suunnittelun tavoitteena on määritellä, miten saada vaatimusmäärittelyn mukaan toimiva ohjelma
		-Arkkitehtuuri suunnittelu
				-Ohjelman rakenne karkealla tasolla
				-Mistä suurimmista rakennekomponenteista koostu
				-Miten komponentit yhdistetään
				-Ei yksikäsitteistä määritelmää
				-Määrittelee ohjemiston rakenteen
						-Rakenne osien vastuut
						-Niiden välisen kommunikaation
				-Keskittyy oleellisiin osii
						-Skaalautuvuus
						-Tietotrva
					-Voivat muutttua ajan myötä
					-kts ~~rivi_136
					-Toimintaympäristökin muokkaa arkkitehtuuria
					-Integraatio olemassaoleviin järjestelmiin
				-Perustuu johonkin arkkitehtuurimalliin
						-Hyväksi havaittu tapa stukturoida tietyntyyppistä sovellusta
								-Kerrosarkkitehtuuri
										-Kerros on kokoelma toisiinsa liitettyjä olioita tai alikomponentteja jotka muodostavat toiminnan suhteen loogisen kokonaisuuden
										-Ylempänö oleva kerros käyttää vain alla olevan tarjoamia palveluita
								-MVB
								-Pipes-and-filters
								-Repository
								-Client-server
								-SOA
								
					-Vesiputouksessa laajemmin käytetty/enemmän aikaa käytetty
							-Oma arkkitehti
					-Agilessa vähemän käytetty
							-Toki agilessakin, mutta syntyy muun ohessa
							-Nollasprinnti, rakennetaan alustava arkkitehtuuri
							-Ei erillistä arkkitehtiä
					-Inkrementaalnen arkkitehtuuri
							-Ei voia sunnitella projktin alussa, muuttuu matkalla
		-Oliosuunnittelu
				-yksittäisten komponenttien valmistelu
		-Vesiputousmalleissa tapahtuu alussa
		-Agilessa joka iteraation aikana
		BDUF Big Design Up Front on yhä joissais, missä tietynlainen tunnettu jörjestelmä, vaatimukset eivät muutu
		
						
						
						
						
						
						
						
						
						
			
			
			